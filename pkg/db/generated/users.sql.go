// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, subscription_id) VALUES ($1, $2, $3) RETURNING id, name, email, subscription_id, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Name           string      `db:"name" json:"name"`
	Email          string      `db:"email" json:"email"`
	SubscriptionID pgtype.Int4 `db:"subscription_id" json:"subscription_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.SubscriptionID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.SubscriptionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, subscription_id, created_at, updated_at, deleted_at FROM users WHERE email = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.SubscriptionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteUser, id)
	return err
}

const updateUserData = `-- name: UpdateUserData :one
UPDATE users SET name = $2, email = $3, updated_at = NOW() WHERE id = $1 RETURNING id, name, email, subscription_id, created_at, updated_at, deleted_at
`

type UpdateUserDataParams struct {
	ID    int32  `db:"id" json:"id"`
	Name  string `db:"name" json:"name"`
	Email string `db:"email" json:"email"`
}

func (q *Queries) UpdateUserData(ctx context.Context, arg *UpdateUserDataParams) (*User, error) {
	row := q.db.QueryRow(ctx, updateUserData, arg.ID, arg.Name, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.SubscriptionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const updateUserSubscription = `-- name: UpdateUserSubscription :one
UPDATE users SET subscription_id = $2, updated_at = NOW() WHERE id = $1 RETURNING id, name, email, subscription_id, created_at, updated_at, deleted_at
`

type UpdateUserSubscriptionParams struct {
	ID             int32       `db:"id" json:"id"`
	SubscriptionID pgtype.Int4 `db:"subscription_id" json:"subscription_id"`
}

func (q *Queries) UpdateUserSubscription(ctx context.Context, arg *UpdateUserSubscriptionParams) (*User, error) {
	row := q.db.QueryRow(ctx, updateUserSubscription, arg.ID, arg.SubscriptionID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.SubscriptionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
