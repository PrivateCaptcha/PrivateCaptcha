// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: apikeys.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO apikeys (
  user_id
) VALUES (
  $1
)
RETURNING id, external_id, user_id, enabled, created_at, expires_at, notes
`

func (q *Queries) CreateAPIKey(ctx context.Context, userID pgtype.Int4) (*APIKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey, userID)
	var i APIKey
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.UserID,
		&i.Enabled,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Notes,
	)
	return &i, err
}

const getAPIKeyByExternalID = `-- name: GetAPIKeyByExternalID :one
SELECT id, external_id, user_id, enabled, created_at, expires_at, notes FROM apikeys WHERE external_id = $1
`

func (q *Queries) GetAPIKeyByExternalID(ctx context.Context, externalID pgtype.UUID) (*APIKey, error) {
	row := q.db.QueryRow(ctx, getAPIKeyByExternalID, externalID)
	var i APIKey
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.UserID,
		&i.Enabled,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Notes,
	)
	return &i, err
}

const updateAPIKey = `-- name: UpdateAPIKey :exec
UPDATE apikeys SET expires_at = $1, enabled = $2
WHERE external_id = $3
`

type UpdateAPIKeyParams struct {
	ExpiresAt  pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
	Enabled    pgtype.Bool        `db:"enabled" json:"enabled"`
	ExternalID pgtype.UUID        `db:"external_id" json:"external_id"`
}

func (q *Queries) UpdateAPIKey(ctx context.Context, arg *UpdateAPIKeyParams) error {
	_, err := q.db.Exec(ctx, updateAPIKey, arg.ExpiresAt, arg.Enabled, arg.ExternalID)
	return err
}
