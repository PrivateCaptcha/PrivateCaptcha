// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: apikeys.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO apikeys (name, user_id, expires_at) VALUES ($1, $2, $3) RETURNING id, name, external_id, user_id, enabled, created_at, expires_at, notes
`

type CreateAPIKeyParams struct {
	Name      string             `db:"name" json:"name"`
	UserID    pgtype.Int4        `db:"user_id" json:"user_id"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg *CreateAPIKeyParams) (*APIKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey, arg.Name, arg.UserID, arg.ExpiresAt)
	var i APIKey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ExternalID,
		&i.UserID,
		&i.Enabled,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Notes,
	)
	return &i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :one
DELETE FROM apikeys WHERE id=$1 AND user_id = $2 RETURNING id, name, external_id, user_id, enabled, created_at, expires_at, notes
`

type DeleteAPIKeyParams struct {
	ID     int32       `db:"id" json:"id"`
	UserID pgtype.Int4 `db:"user_id" json:"user_id"`
}

func (q *Queries) DeleteAPIKey(ctx context.Context, arg *DeleteAPIKeyParams) (*APIKey, error) {
	row := q.db.QueryRow(ctx, deleteAPIKey, arg.ID, arg.UserID)
	var i APIKey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ExternalID,
		&i.UserID,
		&i.Enabled,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Notes,
	)
	return &i, err
}

const deleteUserAPIKeys = `-- name: DeleteUserAPIKeys :exec
DELETE FROM apikeys WHERE user_id = $1
`

func (q *Queries) DeleteUserAPIKeys(ctx context.Context, userID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteUserAPIKeys, userID)
	return err
}

const getAPIKeyByExternalID = `-- name: GetAPIKeyByExternalID :one
SELECT id, name, external_id, user_id, enabled, created_at, expires_at, notes FROM apikeys WHERE external_id = $1
`

func (q *Queries) GetAPIKeyByExternalID(ctx context.Context, externalID pgtype.UUID) (*APIKey, error) {
	row := q.db.QueryRow(ctx, getAPIKeyByExternalID, externalID)
	var i APIKey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ExternalID,
		&i.UserID,
		&i.Enabled,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Notes,
	)
	return &i, err
}

const getUserAPIKeys = `-- name: GetUserAPIKeys :many
SELECT id, name, external_id, user_id, enabled, created_at, expires_at, notes FROM apikeys WHERE user_id = $1 AND deleted_at IS NULL AND expires_at > NOW()
`

func (q *Queries) GetUserAPIKeys(ctx context.Context, userID pgtype.Int4) ([]*APIKey, error) {
	rows, err := q.db.Query(ctx, getUserAPIKeys, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*APIKey
	for rows.Next() {
		var i APIKey
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ExternalID,
			&i.UserID,
			&i.Enabled,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAPIKey = `-- name: UpdateAPIKey :one
UPDATE apikeys SET expires_at = $1, enabled = $2 WHERE external_id = $3 RETURNING id, name, external_id, user_id, enabled, created_at, expires_at, notes
`

type UpdateAPIKeyParams struct {
	ExpiresAt  pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
	Enabled    pgtype.Bool        `db:"enabled" json:"enabled"`
	ExternalID pgtype.UUID        `db:"external_id" json:"external_id"`
}

func (q *Queries) UpdateAPIKey(ctx context.Context, arg *UpdateAPIKeyParams) (*APIKey, error) {
	row := q.db.QueryRow(ctx, updateAPIKey, arg.ExpiresAt, arg.Enabled, arg.ExternalID)
	var i APIKey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ExternalID,
		&i.UserID,
		&i.Enabled,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Notes,
	)
	return &i, err
}
