// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package generated

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccessLevel string

const (
	AccessLevelMember  AccessLevel = "member"
	AccessLevelInvited AccessLevel = "invited"
	AccessLevelOwner   AccessLevel = "owner"
)

func (e *AccessLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccessLevel(s)
	case string:
		*e = AccessLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for AccessLevel: %T", src)
	}
	return nil
}

type NullAccessLevel struct {
	AccessLevel AccessLevel `json:"access_level"`
	Valid       bool        `json:"valid"` // Valid is true if AccessLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccessLevel) Scan(value interface{}) error {
	if value == nil {
		ns.AccessLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccessLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccessLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccessLevel), nil
}

type DifficultyGrowth string

const (
	DifficultyGrowthSlow   DifficultyGrowth = "slow"
	DifficultyGrowthMedium DifficultyGrowth = "medium"
	DifficultyGrowthFast   DifficultyGrowth = "fast"
)

func (e *DifficultyGrowth) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DifficultyGrowth(s)
	case string:
		*e = DifficultyGrowth(s)
	default:
		return fmt.Errorf("unsupported scan type for DifficultyGrowth: %T", src)
	}
	return nil
}

type NullDifficultyGrowth struct {
	DifficultyGrowth DifficultyGrowth `json:"difficulty_growth"`
	Valid            bool             `json:"valid"` // Valid is true if DifficultyGrowth is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDifficultyGrowth) Scan(value interface{}) error {
	if value == nil {
		ns.DifficultyGrowth, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DifficultyGrowth.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDifficultyGrowth) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DifficultyGrowth), nil
}

type DifficultyLevel string

const (
	DifficultyLevelSmall  DifficultyLevel = "small"
	DifficultyLevelMedium DifficultyLevel = "medium"
	DifficultyLevelHigh   DifficultyLevel = "high"
)

func (e *DifficultyLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DifficultyLevel(s)
	case string:
		*e = DifficultyLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for DifficultyLevel: %T", src)
	}
	return nil
}

type NullDifficultyLevel struct {
	DifficultyLevel DifficultyLevel `json:"difficulty_level"`
	Valid           bool            `json:"valid"` // Valid is true if DifficultyLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDifficultyLevel) Scan(value interface{}) error {
	if value == nil {
		ns.DifficultyLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DifficultyLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDifficultyLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DifficultyLevel), nil
}

type APIKey struct {
	ID         int32              `db:"id" json:"id"`
	Name       string             `db:"name" json:"name"`
	ExternalID pgtype.UUID        `db:"external_id" json:"external_id"`
	UserID     pgtype.Int4        `db:"user_id" json:"user_id"`
	Enabled    pgtype.Bool        `db:"enabled" json:"enabled"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	ExpiresAt  pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
	DeletedAt  pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
	Notes      pgtype.Text        `db:"notes" json:"notes"`
}

type Cache struct {
	ID        int32            `db:"id" json:"id"`
	Key       string           `db:"key" json:"key"`
	Value     []byte           `db:"value" json:"value"`
	ExpiresAt pgtype.Timestamp `db:"expires_at" json:"expires_at"`
}

type Organization struct {
	ID        int32              `db:"id" json:"id"`
	Name      string             `db:"name" json:"name"`
	UserID    pgtype.Int4        `db:"user_id" json:"user_id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type OrganizationUser struct {
	OrgID     int32              `db:"org_id" json:"org_id"`
	UserID    int32              `db:"user_id" json:"user_id"`
	Level     AccessLevel        `db:"level" json:"level"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Property struct {
	ID         int32              `db:"id" json:"id"`
	Name       string             `db:"name" json:"name"`
	ExternalID pgtype.UUID        `db:"external_id" json:"external_id"`
	OrgID      pgtype.Int4        `db:"org_id" json:"org_id"`
	CreatorID  pgtype.Int4        `db:"creator_id" json:"creator_id"`
	Domain     string             `db:"domain" json:"domain"`
	Level      DifficultyLevel    `db:"level" json:"level"`
	Growth     DifficultyGrowth   `db:"growth" json:"growth"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt  pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type User struct {
	ID        int32              `db:"id" json:"id"`
	Name      string             `db:"name" json:"name"`
	Email     string             `db:"email" json:"email"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}
