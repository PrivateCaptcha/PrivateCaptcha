// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: properties.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProperty = `-- name: CreateProperty :one
INSERT INTO properties (
  org_id
) VALUES (
  $1
)
RETURNING id, external_id, org_id, difficulty_level, difficulty_growth, created_at, updated_at, deleted_at
`

func (q *Queries) CreateProperty(ctx context.Context, orgID pgtype.Int4) (*Property, error) {
	row := q.db.QueryRow(ctx, createProperty, orgID)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.OrgID,
		&i.DifficultyLevel,
		&i.DifficultyGrowth,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const propertyAndOrgByExternalID = `-- name: PropertyAndOrgByExternalID :one
SELECT p.id, p.external_id, p.org_id, p.difficulty_level, p.difficulty_growth, p.created_at, p.updated_at, p.deleted_at, o.id, o.org_name, o.user_id, o.created_at, o.updated_at, o.deleted_at FROM properties p
INNER JOIN organizations o ON p.org_id = o.id
WHERE p.external_id = $1
`

type PropertyAndOrgByExternalIDRow struct {
	Property     Property     `db:"property" json:"property"`
	Organization Organization `db:"organization" json:"organization"`
}

func (q *Queries) PropertyAndOrgByExternalID(ctx context.Context, externalID pgtype.UUID) (*PropertyAndOrgByExternalIDRow, error) {
	row := q.db.QueryRow(ctx, propertyAndOrgByExternalID, externalID)
	var i PropertyAndOrgByExternalIDRow
	err := row.Scan(
		&i.Property.ID,
		&i.Property.ExternalID,
		&i.Property.OrgID,
		&i.Property.DifficultyLevel,
		&i.Property.DifficultyGrowth,
		&i.Property.CreatedAt,
		&i.Property.UpdatedAt,
		&i.Property.DeletedAt,
		&i.Organization.ID,
		&i.Organization.OrgName,
		&i.Organization.UserID,
		&i.Organization.CreatedAt,
		&i.Organization.UpdatedAt,
		&i.Organization.DeletedAt,
	)
	return &i, err
}
