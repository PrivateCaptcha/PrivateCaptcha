// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: properties.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProperty = `-- name: CreateProperty :one
INSERT INTO properties (name, org_id, domain, level, growth)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, external_id, org_id, domain, level, growth, created_at, updated_at, deleted_at
`

type CreatePropertyParams struct {
	Name   string           `db:"name" json:"name"`
	OrgID  pgtype.Int4      `db:"org_id" json:"org_id"`
	Domain string           `db:"domain" json:"domain"`
	Level  DifficultyLevel  `db:"level" json:"level"`
	Growth DifficultyGrowth `db:"growth" json:"growth"`
}

func (q *Queries) CreateProperty(ctx context.Context, arg *CreatePropertyParams) (*Property, error) {
	row := q.db.QueryRow(ctx, createProperty,
		arg.Name,
		arg.OrgID,
		arg.Domain,
		arg.Level,
		arg.Growth,
	)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ExternalID,
		&i.OrgID,
		&i.Domain,
		&i.Level,
		&i.Growth,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getOrgProperties = `-- name: GetOrgProperties :many
SELECT id, name, external_id, org_id, domain, level, growth, created_at, updated_at, deleted_at from properties WHERE org_id = $1 AND deleted_at IS NULL ORDER BY created_at
`

func (q *Queries) GetOrgProperties(ctx context.Context, orgID pgtype.Int4) ([]*Property, error) {
	rows, err := q.db.Query(ctx, getOrgProperties, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Property
	for rows.Next() {
		var i Property
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ExternalID,
			&i.OrgID,
			&i.Domain,
			&i.Level,
			&i.Growth,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrgPropertyByName = `-- name: GetOrgPropertyByName :one
SELECT id, name, external_id, org_id, domain, level, growth, created_at, updated_at, deleted_at from properties WHERE org_id = $1 AND name = $2 AND deleted_at IS NULL
`

type GetOrgPropertyByNameParams struct {
	OrgID pgtype.Int4 `db:"org_id" json:"org_id"`
	Name  string      `db:"name" json:"name"`
}

func (q *Queries) GetOrgPropertyByName(ctx context.Context, arg *GetOrgPropertyByNameParams) (*Property, error) {
	row := q.db.QueryRow(ctx, getOrgPropertyByName, arg.OrgID, arg.Name)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ExternalID,
		&i.OrgID,
		&i.Domain,
		&i.Level,
		&i.Growth,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getPropertyByID = `-- name: GetPropertyByID :one
SELECT id, name, external_id, org_id, domain, level, growth, created_at, updated_at, deleted_at from properties WHERE id = $1
`

func (q *Queries) GetPropertyByID(ctx context.Context, id int32) (*Property, error) {
	row := q.db.QueryRow(ctx, getPropertyByID, id)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ExternalID,
		&i.OrgID,
		&i.Domain,
		&i.Level,
		&i.Growth,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const propertyAndOrgByExternalID = `-- name: PropertyAndOrgByExternalID :one
SELECT p.id, p.name, p.external_id, p.org_id, p.domain, p.level, p.growth, p.created_at, p.updated_at, p.deleted_at, o.id, o.name, o.user_id, o.created_at, o.updated_at, o.deleted_at FROM properties p
INNER JOIN organizations o ON p.org_id = o.id
WHERE p.external_id = $1
`

type PropertyAndOrgByExternalIDRow struct {
	Property     Property     `db:"property" json:"property"`
	Organization Organization `db:"organization" json:"organization"`
}

func (q *Queries) PropertyAndOrgByExternalID(ctx context.Context, externalID pgtype.UUID) (*PropertyAndOrgByExternalIDRow, error) {
	row := q.db.QueryRow(ctx, propertyAndOrgByExternalID, externalID)
	var i PropertyAndOrgByExternalIDRow
	err := row.Scan(
		&i.Property.ID,
		&i.Property.Name,
		&i.Property.ExternalID,
		&i.Property.OrgID,
		&i.Property.Domain,
		&i.Property.Level,
		&i.Property.Growth,
		&i.Property.CreatedAt,
		&i.Property.UpdatedAt,
		&i.Property.DeletedAt,
		&i.Organization.ID,
		&i.Organization.Name,
		&i.Organization.UserID,
		&i.Organization.CreatedAt,
		&i.Organization.UpdatedAt,
		&i.Organization.DeletedAt,
	)
	return &i, err
}

const softDeleteProperty = `-- name: SoftDeleteProperty :exec
UPDATE properties SET deleted_at = NOW(), updated_at = NOW() WHERE id = $1
`

func (q *Queries) SoftDeleteProperty(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteProperty, id)
	return err
}

const updateProperty = `-- name: UpdateProperty :one
UPDATE properties SET name = $1, level = $2, growth = $3, updated_at = NOW()
WHERE id = $4
RETURNING id, name, external_id, org_id, domain, level, growth, created_at, updated_at, deleted_at
`

type UpdatePropertyParams struct {
	Name   string           `db:"name" json:"name"`
	Level  DifficultyLevel  `db:"level" json:"level"`
	Growth DifficultyGrowth `db:"growth" json:"growth"`
	ID     int32            `db:"id" json:"id"`
}

func (q *Queries) UpdateProperty(ctx context.Context, arg *UpdatePropertyParams) (*Property, error) {
	row := q.db.QueryRow(ctx, updateProperty,
		arg.Name,
		arg.Level,
		arg.Growth,
		arg.ID,
	)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ExternalID,
		&i.OrgID,
		&i.Domain,
		&i.Level,
		&i.Growth,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
